// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// draw
IntegerVector draw(int n, NumericVector p, IntegerVector x);
RcppExport SEXP _partitions_draw(SEXP nSEXP, SEXP pSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(draw(n, p, x));
    return rcpp_result_gen;
END_RCPP
}
// Exp_Sampler
IntegerMatrix Exp_Sampler(NumericVector data_, NumericVector A, NumericVector B, NumericVector params, int n_samples, int spacing);
RcppExport SEXP _partitions_Exp_Sampler(SEXP data_SEXP, SEXP ASEXP, SEXP BSEXP, SEXP paramsSEXP, SEXP n_samplesSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(Exp_Sampler(data_, A, B, params, n_samples, spacing));
    return rcpp_result_gen;
END_RCPP
}
// Link_Sampler
IntegerMatrix Link_Sampler(IntegerMatrix data_, IntegerVector dbindex, NumericVector A, NumericVector B, List params, int n_samples, int spacing);
RcppExport SEXP _partitions_Link_Sampler(SEXP data_SEXP, SEXP dbindexSEXP, SEXP ASEXP, SEXP BSEXP, SEXP paramsSEXP, SEXP n_samplesSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dbindex(dbindexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(Link_Sampler(data_, dbindex, A, B, params, n_samples, spacing));
    return rcpp_result_gen;
END_RCPP
}
// loglikf
double loglikf(double conc, IntegerMatrix x, IntegerVector z, List params);
RcppExport SEXP _partitions_loglikf(SEXP concSEXP, SEXP xSEXP, SEXP zSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type conc(concSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikf(conc, x, z, params));
    return rcpp_result_gen;
END_RCPP
}
// loglikds
double loglikds(NumericVector vconc, IntegerMatrix x, IntegerVector z, List params);
RcppExport SEXP _partitions_loglikds(SEXP vconcSEXP, SEXP xSEXP, SEXP zSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vconc(vconcSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikds(vconc, x, z, params));
    return rcpp_result_gen;
END_RCPP
}
// loglikdsV
NumericVector loglikdsV(NumericVector vconc, IntegerMatrix x, IntegerVector z, List params);
RcppExport SEXP _partitions_loglikdsV(SEXP vconcSEXP, SEXP xSEXP, SEXP zSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vconc(vconcSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikdsV(vconc, x, z, params));
    return rcpp_result_gen;
END_RCPP
}
// loglikone
double loglikone(double conc, int fd, IntegerMatrix x, IntegerVector z, List params);
RcppExport SEXP _partitions_loglikone(SEXP concSEXP, SEXP fdSEXP, SEXP xSEXP, SEXP zSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type conc(concSEXP);
    Rcpp::traits::input_parameter< int >::type fd(fdSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikone(conc, fd, x, z, params));
    return rcpp_result_gen;
END_RCPP
}
// loglikx
double loglikx(IntegerMatrix x, IntegerVector z, List params);
RcppExport SEXP _partitions_loglikx(SEXP xSEXP, SEXP zSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikx(x, z, params));
    return rcpp_result_gen;
END_RCPP
}
// loglikxSP
double loglikxSP(NumericVector betas, IntegerMatrix x, IntegerVector z, List params);
RcppExport SEXP _partitions_loglikxSP(SEXP betasSEXP, SEXP xSEXP, SEXP zSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikxSP(betas, x, z, params));
    return rcpp_result_gen;
END_RCPP
}
// logsumexp
double logsumexp(double a, double b);
RcppExport SEXP _partitions_logsumexp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(logsumexp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// MDM_Sampler
IntegerMatrix MDM_Sampler(IntegerMatrix data_, NumericVector A, NumericVector B, List params, int n_samples, int spacing);
RcppExport SEXP _partitions_MDM_Sampler(SEXP data_SEXP, SEXP ASEXP, SEXP BSEXP, SEXP paramsSEXP, SEXP n_samplesSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(MDM_Sampler(data_, A, B, params, n_samples, spacing));
    return rcpp_result_gen;
END_RCPP
}
// a_MFM
NumericVector a_MFM(double gamma, int n);
RcppExport SEXP _partitions_a_MFM(SEXP gammaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(a_MFM(gamma, n));
    return rcpp_result_gen;
END_RCPP
}
// b_MFM
NumericVector b_MFM(NumericVector log_pK, double gamma, int n, int upto);
RcppExport SEXP _partitions_b_MFM(SEXP log_pKSEXP, SEXP gammaSEXP, SEXP nSEXP, SEXP uptoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type log_pK(log_pKSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type upto(uptoSEXP);
    rcpp_result_gen = Rcpp::wrap(b_MFM(log_pK, gamma, n, upto));
    return rcpp_result_gen;
END_RCPP
}
// unislice
double unislice(double x0, int k0, int N, int Khat, NumericVector x1, double lx, IntegerVector Nk, NumericVector hpriorpar, double w, int m, double lower, double upper, std::string Prior);
RcppExport SEXP _partitions_unislice(SEXP x0SEXP, SEXP k0SEXP, SEXP NSEXP, SEXP KhatSEXP, SEXP x1SEXP, SEXP lxSEXP, SEXP NkSEXP, SEXP hpriorparSEXP, SEXP wSEXP, SEXP mSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP PriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< int >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type Khat(KhatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type lx(lxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Nk(NkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriorpar(hpriorparSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< std::string >::type Prior(PriorSEXP);
    rcpp_result_gen = Rcpp::wrap(unislice(x0, k0, N, Khat, x1, lx, Nk, hpriorpar, w, m, lower, upper, Prior));
    return rcpp_result_gen;
END_RCPP
}
// unislicef
double unislicef(double conc, IntegerMatrix x, IntegerVector z, List params, NumericVector hpriorconc, double w, int m, double lower, double upper, NumericVector x1, int N, int Khat, IntegerVector Nk, NumericVector hpriorpar, std::string Prior);
RcppExport SEXP _partitions_unislicef(SEXP concSEXP, SEXP xSEXP, SEXP zSEXP, SEXP paramsSEXP, SEXP hpriorconcSEXP, SEXP wSEXP, SEXP mSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP x1SEXP, SEXP NSEXP, SEXP KhatSEXP, SEXP NkSEXP, SEXP hpriorparSEXP, SEXP PriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type conc(concSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriorconc(hpriorconcSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type Khat(KhatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Nk(NkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriorpar(hpriorparSEXP);
    Rcpp::traits::input_parameter< std::string >::type Prior(PriorSEXP);
    rcpp_result_gen = Rcpp::wrap(unislicef(conc, x, z, params, hpriorconc, w, m, lower, upper, x1, N, Khat, Nk, hpriorpar, Prior));
    return rcpp_result_gen;
END_RCPP
}
// unisliceds
NumericVector unisliceds(NumericVector vconc, IntegerMatrix x, IntegerVector z, List params, NumericVector hpriorconc, double w, int m, double lower, double upper, NumericVector x1, int N, int Khat, IntegerVector Nk, NumericVector hpriorpar, std::string Prior);
RcppExport SEXP _partitions_unisliceds(SEXP vconcSEXP, SEXP xSEXP, SEXP zSEXP, SEXP paramsSEXP, SEXP hpriorconcSEXP, SEXP wSEXP, SEXP mSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP x1SEXP, SEXP NSEXP, SEXP KhatSEXP, SEXP NkSEXP, SEXP hpriorparSEXP, SEXP PriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vconc(vconcSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriorconc(hpriorconcSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type Khat(KhatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Nk(NkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriorpar(hpriorparSEXP);
    Rcpp::traits::input_parameter< std::string >::type Prior(PriorSEXP);
    rcpp_result_gen = Rcpp::wrap(unisliceds(vconc, x, z, params, hpriorconc, w, m, lower, upper, x1, N, Khat, Nk, hpriorpar, Prior));
    return rcpp_result_gen;
END_RCPP
}
// unislicespb1
NumericVector unislicespb1(NumericVector betas, IntegerMatrix x, IntegerVector z, List params, NumericVector hpriords, double w, int m, double lower, double upper, NumericVector x1, int N, int Khat, IntegerVector Nk, NumericVector hpriorpar, std::string Prior);
RcppExport SEXP _partitions_unislicespb1(SEXP betasSEXP, SEXP xSEXP, SEXP zSEXP, SEXP paramsSEXP, SEXP hpriordsSEXP, SEXP wSEXP, SEXP mSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP x1SEXP, SEXP NSEXP, SEXP KhatSEXP, SEXP NkSEXP, SEXP hpriorparSEXP, SEXP PriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriords(hpriordsSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type Khat(KhatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Nk(NkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriorpar(hpriorparSEXP);
    Rcpp::traits::input_parameter< std::string >::type Prior(PriorSEXP);
    rcpp_result_gen = Rcpp::wrap(unislicespb1(betas, x, z, params, hpriords, w, m, lower, upper, x1, N, Khat, Nk, hpriorpar, Prior));
    return rcpp_result_gen;
END_RCPP
}
// unislicespb
NumericVector unislicespb(NumericVector betas, IntegerMatrix x, IntegerVector z, List params, NumericVector hpriords, double w, int m, double lower, double upper, NumericVector x1, int N, int Khat, IntegerVector Nk, NumericVector hpriorpar, std::string Prior);
RcppExport SEXP _partitions_unislicespb(SEXP betasSEXP, SEXP xSEXP, SEXP zSEXP, SEXP paramsSEXP, SEXP hpriordsSEXP, SEXP wSEXP, SEXP mSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP x1SEXP, SEXP NSEXP, SEXP KhatSEXP, SEXP NkSEXP, SEXP hpriorparSEXP, SEXP PriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriords(hpriordsSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type Khat(KhatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Nk(NkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriorpar(hpriorparSEXP);
    Rcpp::traits::input_parameter< std::string >::type Prior(PriorSEXP);
    rcpp_result_gen = Rcpp::wrap(unislicespb(betas, x, z, params, hpriords, w, m, lower, upper, x1, N, Khat, Nk, hpriorpar, Prior));
    return rcpp_result_gen;
END_RCPP
}
// unislicem
NumericVector unislicem(NumericVector x1, int N, int Khat, double lx, IntegerVector Nk, NumericVector hpriorpar, double w, int m, NumericVector lo, NumericVector up, std::string Prior, IntegerVector samind);
RcppExport SEXP _partitions_unislicem(SEXP x1SEXP, SEXP NSEXP, SEXP KhatSEXP, SEXP lxSEXP, SEXP NkSEXP, SEXP hpriorparSEXP, SEXP wSEXP, SEXP mSEXP, SEXP loSEXP, SEXP upSEXP, SEXP PriorSEXP, SEXP samindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type Khat(KhatSEXP);
    Rcpp::traits::input_parameter< double >::type lx(lxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Nk(NkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriorpar(hpriorparSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lo(loSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type up(upSEXP);
    Rcpp::traits::input_parameter< std::string >::type Prior(PriorSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type samind(samindSEXP);
    rcpp_result_gen = Rcpp::wrap(unislicem(x1, N, Khat, lx, Nk, hpriorpar, w, m, lo, up, Prior, samind));
    return rcpp_result_gen;
END_RCPP
}
// unislicemNBD
NumericVector unislicemNBD(NumericVector x1, double lx, IntegerVector Lm, NumericVector mu0, NumericVector hpriorpar, double w, int m, NumericVector lo, NumericVector up, IntegerVector samind);
RcppExport SEXP _partitions_unislicemNBD(SEXP x1SEXP, SEXP lxSEXP, SEXP LmSEXP, SEXP mu0SEXP, SEXP hpriorparSEXP, SEXP wSEXP, SEXP mSEXP, SEXP loSEXP, SEXP upSEXP, SEXP samindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type lx(lxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Lm(LmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriorpar(hpriorparSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lo(loSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type up(upSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type samind(samindSEXP);
    rcpp_result_gen = Rcpp::wrap(unislicemNBD(x1, lx, Lm, mu0, hpriorpar, w, m, lo, up, samind));
    return rcpp_result_gen;
END_RCPP
}
// unislicemESCD
NumericVector unislicemESCD(NumericVector x1, double lx, IntegerVector Lm, NumericVector mu0, NumericVector hpriorpar, double w, int m, NumericVector lo, NumericVector up, IntegerVector samind);
RcppExport SEXP _partitions_unislicemESCD(SEXP x1SEXP, SEXP lxSEXP, SEXP LmSEXP, SEXP mu0SEXP, SEXP hpriorparSEXP, SEXP wSEXP, SEXP mSEXP, SEXP loSEXP, SEXP upSEXP, SEXP samindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type lx(lxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Lm(LmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriorpar(hpriorparSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lo(loSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type up(upSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type samind(samindSEXP);
    rcpp_result_gen = Rcpp::wrap(unislicemESCD(x1, lx, Lm, mu0, hpriorpar, w, m, lo, up, samind));
    return rcpp_result_gen;
END_RCPP
}
// unislicem1
NumericVector unislicem1(NumericVector x1, int N, int Khat, double lx, IntegerVector Nk, NumericVector hpriorpar, double w, int m, NumericVector lo, NumericVector up, std::string Prior, IntegerVector samind);
RcppExport SEXP _partitions_unislicem1(SEXP x1SEXP, SEXP NSEXP, SEXP KhatSEXP, SEXP lxSEXP, SEXP NkSEXP, SEXP hpriorparSEXP, SEXP wSEXP, SEXP mSEXP, SEXP loSEXP, SEXP upSEXP, SEXP PriorSEXP, SEXP samindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type Khat(KhatSEXP);
    Rcpp::traits::input_parameter< double >::type lx(lxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Nk(NkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriorpar(hpriorparSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lo(loSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type up(upSEXP);
    Rcpp::traits::input_parameter< std::string >::type Prior(PriorSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type samind(samindSEXP);
    rcpp_result_gen = Rcpp::wrap(unislicem1(x1, N, Khat, lx, Nk, hpriorpar, w, m, lo, up, Prior, samind));
    return rcpp_result_gen;
END_RCPP
}
// unislicemGP
NumericVector unislicemGP(NumericVector x1, int N, int M, int Khat, double lx, IntegerVector Ml, NumericVector hpriorpar, double w, int m, NumericVector lo, NumericVector up, IntegerVector samind);
RcppExport SEXP _partitions_unislicemGP(SEXP x1SEXP, SEXP NSEXP, SEXP MSEXP, SEXP KhatSEXP, SEXP lxSEXP, SEXP MlSEXP, SEXP hpriorparSEXP, SEXP wSEXP, SEXP mSEXP, SEXP loSEXP, SEXP upSEXP, SEXP samindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type Khat(KhatSEXP);
    Rcpp::traits::input_parameter< double >::type lx(lxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ml(MlSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriorpar(hpriorparSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lo(loSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type up(upSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type samind(samindSEXP);
    rcpp_result_gen = Rcpp::wrap(unislicemGP(x1, N, M, Khat, lx, Ml, hpriorpar, w, m, lo, up, samind));
    return rcpp_result_gen;
END_RCPP
}
// Web_SamplerSP
IntegerMatrix Web_SamplerSP(IntegerMatrix data_, IntegerVector assignments, NumericVector A, NumericVector B, NumericVector distortions, List params, int n_samples, int spacing);
RcppExport SEXP _partitions_Web_SamplerSP(SEXP data_SEXP, SEXP assignmentsSEXP, SEXP ASEXP, SEXP BSEXP, SEXP distortionsSEXP, SEXP paramsSEXP, SEXP n_samplesSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type assignments(assignmentsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type distortions(distortionsSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(Web_SamplerSP(data_, assignments, A, B, distortions, params, n_samples, spacing));
    return rcpp_result_gen;
END_RCPP
}
// Web_SamplerSP_Par
IntegerMatrix Web_SamplerSP_Par(IntegerMatrix data_, IntegerVector assignments, int tclus, NumericVector A, NumericVector B, NumericVector distortions, List params, int n_samples, int spacing);
RcppExport SEXP _partitions_Web_SamplerSP_Par(SEXP data_SEXP, SEXP assignmentsSEXP, SEXP tclusSEXP, SEXP ASEXP, SEXP BSEXP, SEXP distortionsSEXP, SEXP paramsSEXP, SEXP n_samplesSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type assignments(assignmentsSEXP);
    Rcpp::traits::input_parameter< int >::type tclus(tclusSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type distortions(distortionsSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(Web_SamplerSP_Par(data_, assignments, tclus, A, B, distortions, params, n_samples, spacing));
    return rcpp_result_gen;
END_RCPP
}
// Web_SamplerSP_Prior
IntegerMatrix Web_SamplerSP_Prior(IntegerMatrix data_, IntegerVector assignments, NumericVector A, NumericVector B, NumericVector distortions, List params, int n_samples, int spacing);
RcppExport SEXP _partitions_Web_SamplerSP_Prior(SEXP data_SEXP, SEXP assignmentsSEXP, SEXP ASEXP, SEXP BSEXP, SEXP distortionsSEXP, SEXP paramsSEXP, SEXP n_samplesSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type assignments(assignmentsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type distortions(distortionsSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(Web_SamplerSP_Prior(data_, assignments, A, B, distortions, params, n_samples, spacing));
    return rcpp_result_gen;
END_RCPP
}
// Web_SamplerSP_Scale
IntegerMatrix Web_SamplerSP_Scale(IntegerMatrix data_, IntegerVector assignments, IntegerMatrix Index, NumericVector A, NumericVector B, NumericVector distortions, List params, int n_samples, int spacing);
RcppExport SEXP _partitions_Web_SamplerSP_Scale(SEXP data_SEXP, SEXP assignmentsSEXP, SEXP IndexSEXP, SEXP ASEXP, SEXP BSEXP, SEXP distortionsSEXP, SEXP paramsSEXP, SEXP n_samplesSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type assignments(assignmentsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type Index(IndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type distortions(distortionsSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(Web_SamplerSP_Scale(data_, assignments, Index, A, B, distortions, params, n_samples, spacing));
    return rcpp_result_gen;
END_RCPP
}
// Web_SamplerSP_BL
IntegerMatrix Web_SamplerSP_BL(IntegerMatrix data_, IntegerVector assignments, List zblock, IntegerVector Idblock, NumericVector A, NumericVector B, NumericVector distortions, List params, int n_samples, int spacing);
RcppExport SEXP _partitions_Web_SamplerSP_BL(SEXP data_SEXP, SEXP assignmentsSEXP, SEXP zblockSEXP, SEXP IdblockSEXP, SEXP ASEXP, SEXP BSEXP, SEXP distortionsSEXP, SEXP paramsSEXP, SEXP n_samplesSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type assignments(assignmentsSEXP);
    Rcpp::traits::input_parameter< List >::type zblock(zblockSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Idblock(IdblockSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type distortions(distortionsSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(Web_SamplerSP_BL(data_, assignments, zblock, Idblock, A, B, distortions, params, n_samples, spacing));
    return rcpp_result_gen;
END_RCPP
}
// Web_SamplerSP_ScaleMix
IntegerMatrix Web_SamplerSP_ScaleMix(IntegerMatrix data_, IntegerVector assignments, IntegerMatrix index, NumericVector A, NumericVector B, NumericVector distortions, List params, int n_samples, int spacing);
RcppExport SEXP _partitions_Web_SamplerSP_ScaleMix(SEXP data_SEXP, SEXP assignmentsSEXP, SEXP indexSEXP, SEXP ASEXP, SEXP BSEXP, SEXP distortionsSEXP, SEXP paramsSEXP, SEXP n_samplesSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type assignments(assignmentsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type index(indexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type distortions(distortionsSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(Web_SamplerSP_ScaleMix(data_, assignments, index, A, B, distortions, params, n_samples, spacing));
    return rcpp_result_gen;
END_RCPP
}
// Web_SamplerSP_ScaleBlock
IntegerMatrix Web_SamplerSP_ScaleBlock(IntegerMatrix data_, IntegerVector assignments, IntegerMatrix index, NumericVector A, NumericVector B, NumericVector distortions, List params, IntegerVector block, bool mix, int n_samples, int spacing);
RcppExport SEXP _partitions_Web_SamplerSP_ScaleBlock(SEXP data_SEXP, SEXP assignmentsSEXP, SEXP indexSEXP, SEXP ASEXP, SEXP BSEXP, SEXP distortionsSEXP, SEXP paramsSEXP, SEXP blockSEXP, SEXP mixSEXP, SEXP n_samplesSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type assignments(assignmentsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type index(indexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type distortions(distortionsSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type block(blockSEXP);
    Rcpp::traits::input_parameter< bool >::type mix(mixSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(Web_SamplerSP_ScaleBlock(data_, assignments, index, A, B, distortions, params, block, mix, n_samples, spacing));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_partitions_draw", (DL_FUNC) &_partitions_draw, 3},
    {"_partitions_Exp_Sampler", (DL_FUNC) &_partitions_Exp_Sampler, 6},
    {"_partitions_Link_Sampler", (DL_FUNC) &_partitions_Link_Sampler, 7},
    {"_partitions_loglikf", (DL_FUNC) &_partitions_loglikf, 4},
    {"_partitions_loglikds", (DL_FUNC) &_partitions_loglikds, 4},
    {"_partitions_loglikdsV", (DL_FUNC) &_partitions_loglikdsV, 4},
    {"_partitions_loglikone", (DL_FUNC) &_partitions_loglikone, 5},
    {"_partitions_loglikx", (DL_FUNC) &_partitions_loglikx, 3},
    {"_partitions_loglikxSP", (DL_FUNC) &_partitions_loglikxSP, 4},
    {"_partitions_logsumexp", (DL_FUNC) &_partitions_logsumexp, 2},
    {"_partitions_MDM_Sampler", (DL_FUNC) &_partitions_MDM_Sampler, 6},
    {"_partitions_a_MFM", (DL_FUNC) &_partitions_a_MFM, 2},
    {"_partitions_b_MFM", (DL_FUNC) &_partitions_b_MFM, 4},
    {"_partitions_unislice", (DL_FUNC) &_partitions_unislice, 13},
    {"_partitions_unislicef", (DL_FUNC) &_partitions_unislicef, 15},
    {"_partitions_unisliceds", (DL_FUNC) &_partitions_unisliceds, 15},
    {"_partitions_unislicespb1", (DL_FUNC) &_partitions_unislicespb1, 15},
    {"_partitions_unislicespb", (DL_FUNC) &_partitions_unislicespb, 15},
    {"_partitions_unislicem", (DL_FUNC) &_partitions_unislicem, 12},
    {"_partitions_unislicemNBD", (DL_FUNC) &_partitions_unislicemNBD, 10},
    {"_partitions_unislicemESCD", (DL_FUNC) &_partitions_unislicemESCD, 10},
    {"_partitions_unislicem1", (DL_FUNC) &_partitions_unislicem1, 12},
    {"_partitions_unislicemGP", (DL_FUNC) &_partitions_unislicemGP, 12},
    {"_partitions_Web_SamplerSP", (DL_FUNC) &_partitions_Web_SamplerSP, 8},
    {"_partitions_Web_SamplerSP_Par", (DL_FUNC) &_partitions_Web_SamplerSP_Par, 9},
    {"_partitions_Web_SamplerSP_Prior", (DL_FUNC) &_partitions_Web_SamplerSP_Prior, 8},
    {"_partitions_Web_SamplerSP_Scale", (DL_FUNC) &_partitions_Web_SamplerSP_Scale, 9},
    {"_partitions_Web_SamplerSP_BL", (DL_FUNC) &_partitions_Web_SamplerSP_BL, 10},
    {"_partitions_Web_SamplerSP_ScaleMix", (DL_FUNC) &_partitions_Web_SamplerSP_ScaleMix, 9},
    {"_partitions_Web_SamplerSP_ScaleBlock", (DL_FUNC) &_partitions_Web_SamplerSP_ScaleBlock, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_partitions(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
